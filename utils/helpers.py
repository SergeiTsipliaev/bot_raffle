import json
from datetime import datetime
from typing import Dict, List, Optional


async def format_giveaway_info(giveaway: Dict, participants_count: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
    status_emoji = {
        'created': 'üîß',
        'published': 'üì¢',
        'finished': 'üèÅ'
    }

    status_text = {
        'created': '–°–æ–∑–¥–∞–Ω',
        'published': '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω',
        'finished': '–ó–∞–≤–µ—Ä—à–µ–Ω'
    }

    status = giveaway.get('status', 'created')

    text = f"üìã **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ**\n\n"
    text += f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {giveaway['name']}\n"
    text += f"**–°—Ç–∞—Ç—É—Å:** {status_emoji.get(status, '‚ùì')} {status_text.get(status, '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
    text += f"**ID:** `{giveaway['id']}`\n"

    max_participants = giveaway.get('max_participants', 0)
    if max_participants > 0:
        text += f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {participants_count} –∏–∑ {max_participants}\n"
    else:
        text += f"**–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {participants_count} –∏–∑ ‚àû\n"

    text += f"**–ü—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç:** {giveaway.get('prizes_count', 1)}\n"

    if giveaway.get('description'):
        text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {giveaway['description']}\n"

    if giveaway.get('referral_enabled'):
        text += f"**–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:** ‚úÖ –í–∫–ª—é—á–µ–Ω–∞\n"

    if giveaway.get('captcha_enabled'):
        text += f"**–ó–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤:** ‚úÖ –í–∫–ª—é—á–µ–Ω–∞\n"

    created_at = datetime.fromisoformat(giveaway['created_at'].replace('Z', '+00:00'))
    text += f"**–°–æ–∑–¥–∞–Ω:** {created_at.strftime('%d.%m.%Y %H:%M')}\n"

    if giveaway.get('published_at'):
        published_at = datetime.fromisoformat(giveaway['published_at'].replace('Z', '+00:00'))
        text += f"**–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:** {published_at.strftime('%d.%m.%Y %H:%M')}\n"

    if giveaway.get('finished_at'):
        finished_at = datetime.fromisoformat(giveaway['finished_at'].replace('Z', '+00:00'))
        text += f"**–ó–∞–≤–µ—Ä—à–µ–Ω:** {finished_at.strftime('%d.%m.%Y %H:%M')}\n"

    return text


def generate_referral_link(bot_username: str, giveaway_id: str, user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    return f"https://t.me/{bot_username}?start=ref_{giveaway_id}_{user_id}"


def format_winners_list(winners: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"""
    if not winners:
        return "–ù–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"

    text = "üèÜ **–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:**\n\n"

    for winner in winners:
        name = winner.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        username = winner.get('username')

        if username:
            text += f"{winner['place']}. {name} (@{username})\n"
        else:
            text += f"{winner['place']}. {name} (ID: {winner['user_id']})\n"

    return text


def parse_referral_link(start_param: str) -> Optional[Dict]:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    if not start_param.startswith('ref_'):
        return None

    try:
        parts = start_param.split('_')
        if len(parts) != 3:
            return None

        return {
            'giveaway_id': parts[1],
            'referrer_id': int(parts[2])
        }
    except (ValueError, IndexError):
        return None


async def check_channel_subscription(bot, user_id: int, channel_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(channel_id, user_id)
        return member.status not in ['left', 'kicked']
    except Exception:
        return False