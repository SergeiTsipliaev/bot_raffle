import asyncio
from datetime import datetime, timedelta
from typing import Dict, List
import logging

logger = logging.getLogger(__name__)


class GiveawayScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"""

    def __init__(self, db_manager, bot):
        self.db = db_manager
        self.bot = bot
        self.scheduled_tasks = {}  # giveaway_id: task
        self.running = False

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = True

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self.load_scheduled_giveaways()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        asyncio.create_task(self.scheduler_loop())
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∑–∞–ø—É—â–µ–Ω")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False

        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
        for task in self.scheduled_tasks.values():
            task.cancel()

        self.scheduled_tasks.clear()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def load_scheduled_giveaways(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"""
        async with self.db.get_db_connection() as conn:
            cursor = await conn.execute('''
                SELECT id, scheduled_publish 
                FROM giveaways 
                WHERE status = 'scheduled' AND scheduled_publish > datetime('now')
            ''')

            rows = await cursor.fetchall()

            for row in rows:
                giveaway_id, scheduled_time_str = row
                scheduled_time = datetime.fromisoformat(scheduled_time_str)

                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                delay = (scheduled_time - datetime.now()).total_seconds()
                if delay > 0:
                    task = asyncio.create_task(
                        self.publish_giveaway_delayed(giveaway_id, delay)
                    )
                    self.scheduled_tasks[giveaway_id] = task

    async def schedule_giveaway(self, giveaway_id: str, publish_time: datetime):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        async with self.db.get_db_connection() as conn:
            await conn.execute('''
                UPDATE giveaways 
                SET status = 'scheduled', scheduled_publish = ?
                WHERE id = ?
            ''', (publish_time.isoformat(), giveaway_id))
            await conn.commit()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        delay = (publish_time - datetime.now()).total_seconds()
        if delay > 0:
            task = asyncio.create_task(
                self.publish_giveaway_delayed(giveaway_id, delay)
            )
            self.scheduled_tasks[giveaway_id] = task

            logger.info(f"–†–æ–∑—ã–≥—Ä—ã—à {giveaway_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {publish_time}")

    async def publish_giveaway_delayed(self, giveaway_id: str, delay: float):
        """–û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        try:
            await asyncio.sleep(delay)

            # –ü—É–±–ª–∏–∫—É–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à
            await self.publish_giveaway(giveaway_id)

            # –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
            if giveaway_id in self.scheduled_tasks:
                del self.scheduled_tasks[giveaway_id]

        except asyncio.CancelledError:
            logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id}: {e}")

    async def publish_giveaway(self, giveaway_id: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        async with self.db.get_db_connection() as conn:
            await conn.execute('''
                UPDATE giveaways 
                SET status = 'published', published_at = datetime('now')
                WHERE id = ?
            ''', (giveaway_id,))
            await conn.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        giveaway = await self.db.get_giveaway(giveaway_id)
        if giveaway:
            try:
                await self.bot.send_message(
                    giveaway['admin_id'],
                    f"üì¢ **–†–æ–∑—ã–≥—Ä—ã—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!**\n\n"
                    f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {giveaway['name']}\n"
                    f"**ID:** `{giveaway_id}`\n"
                    f"**–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

        logger.info(f"–†–æ–∑—ã–≥—Ä—ã—à {giveaway_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")

    async def cancel_scheduled_giveaway(self, giveaway_id: str):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        if giveaway_id in self.scheduled_tasks:
            self.scheduled_tasks[giveaway_id].cancel()
            del self.scheduled_tasks[giveaway_id]

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with self.db.get_db_connection() as conn:
            await conn.execute('''
                UPDATE giveaways 
                SET status = 'created', scheduled_publish = NULL
                WHERE id = ?
            ''', (giveaway_id,))
            await conn.commit()

        logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")

    async def scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                await asyncio.sleep(60)

                # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                completed_tasks = [
                    gid for gid, task in self.scheduled_tasks.items()
                    if task.done()
                ]

                for gid in completed_tasks:
                    del self.scheduled_tasks[gid]

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(60)