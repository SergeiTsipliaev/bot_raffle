import json
from typing import List, Dict
import logging
from telegram import Update
from telegram.ext import ContextTypes
from database.models import DatabaseManager
from keyboards.inline import InlineKeyboards
from keyboards.reply import ReplyKeyboards
from config.settings import settings

logger = logging.getLogger(__name__)

def generate_referral_link(bot_username: str, giveaway_id: str, user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–ª–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    return f"https://t.me/{bot_username}?start=ref_{giveaway_id}_{user_id}"


class UserHandlers:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    async def user_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.add_user({
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'language_code': user.language_code
            })

            welcome_text = settings.MESSAGES['welcome_user'].format(name=user.first_name)
            keyboard = ReplyKeyboards.user_main_menu()

            await update.message.reply_text(
                welcome_text,
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ user_start: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def participate_in_giveaway(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
        try:
            callback_data = update.callback_query.data
            giveaway_id = callback_data.split('_')[1]
            user = update.effective_user

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à
            giveaway = await self.db.get_giveaway(giveaway_id)
            if not giveaway:
                await update.callback_query.edit_message_text("‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞
            if giveaway['status'] != 'published':
                await update.callback_query.edit_message_text("‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            is_participating = await self.db.is_participating(giveaway_id, user.id)
            if is_participating:
                await update.callback_query.edit_message_text(
                    settings.MESSAGES['already_participating']
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            max_participants = giveaway.get('max_participants', 0)
            if max_participants > 0:
                current_count = await self.db.get_participants_count(giveaway_id)
                if current_count >= max_participants:
                    await update.callback_query.edit_message_text(
                        "‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!"
                    )
                    return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
            required_channels = giveaway.get('required_channels')
            if required_channels:
                try:
                    channels_list = json.loads(required_channels)
                    subscription_check = await self.check_subscriptions(
                        user.id, channels_list, context.bot
                    )

                    if not subscription_check['all_subscribed']:
                        unsubscribed_channels = subscription_check['unsubscribed']
                        channels_text = '\n'.join([f"‚Ä¢ @{ch}" for ch in unsubscribed_channels])

                        await update.callback_query.edit_message_text(
                            f"{settings.MESSAGES['subscription_required']}\n\n{channels_text}\n\n"
                            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞."
                        )
                        return
                except (json.JSONDecodeError, TypeError):
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
            if giveaway.get('captcha_enabled'):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ø—á—É
                from handlers.captcha import CaptchaHandler
                captcha_handler = CaptchaHandler(self.db)
                await captcha_handler.show_captcha(update, context, user.id, giveaway_id)
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
            await self._add_participant_to_giveaway(update, context, giveaway_id, giveaway)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ participate_in_giveaway: {e}")
            try:
                await update.callback_query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except:
                pass

    async def _add_participant_to_giveaway(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                           giveaway_id: str, giveaway: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à"""
        user = update.effective_user

        try:
            user_data = {
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            referred_by = context.user_data.get('referred_by')

            success = await self.db.add_participant(giveaway_id, user_data, referred_by)

            if success:
                participants_count = await self.db.get_participants_count(giveaway_id)

                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                keyboard = InlineKeyboards.participation_button(
                    giveaway_id,
                    participants_count,
                    giveaway.get('show_participants_count', True),
                    giveaway.get('button_text', '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å')
                )

                try:
                    await update.callback_query.edit_message_reply_markup(reply_markup=keyboard)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É: {e}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                confirmation_text = (
                    f"üéâ {settings.MESSAGES['participation_success']}\n\n"
                    f"**–†–æ–∑—ã–≥—Ä—ã—à:** {giveaway['name']}\n"
                    f"**–í–∞—à –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞:** #{participants_count}"
                )

                try:
                    await context.bot.send_message(
                        user.id,
                        confirmation_text,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {user.id}: {e}")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ edit_message_text
                    try:
                        await update.callback_query.edit_message_text(
                            f"‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ! –ù–æ–º–µ—Ä: #{participants_count}\n\n"
                            f"**–†–æ–∑—ã–≥—Ä—ã—à:** {giveaway['name']}"
                        )
                    except:
                        pass

                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
                if giveaway.get('referral_enabled'):
                    try:
                        bot_username = (await context.bot.get_me()).username
                        referral_link = generate_referral_link(bot_username, giveaway_id, user.id)

                        referral_text = (
                            f"üîó **–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ —É–≤–µ–ª–∏—á—å—Ç–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É!**\n\n"
                            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{referral_link}`\n\n"
                            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤–∞—à–∏ —à–∞–Ω—Å—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –≤ "
                            f"{giveaway.get('referral_multiplier', 1.5)} —Ä–∞–∑–∞!"
                        )

                        await context.bot.send_message(
                            user.id,
                            referral_text,
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É: {e}")
            else:
                await update.callback_query.edit_message_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ _add_participant_to_giveaway: {e}")
            try:
                await update.callback_query.edit_message_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞."
                )
            except:
                pass

    async def check_subscriptions(self, user_id: int, channels: List[str], bot) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
        all_subscribed = True
        unsubscribed = []

        for channel in channels:
            try:
                # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
                channel_clean = channel.replace('@', '')

                member = await bot.get_chat_member(f"@{channel_clean}", user_id)
                if member.status in ['left', 'kicked']:
                    all_subscribed = False
                    unsubscribed.append(channel_clean)
            except Exception as e:
                logger.error(f"Error checking subscription for {channel}: {e}")
                all_subscribed = False
                unsubscribed.append(channel.replace('@', ''))

        return {
            'all_subscribed': all_subscribed,
            'unsubscribed': unsubscribed
        }

    async def show_user_participations(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id

        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            import aiosqlite
            async with aiosqlite.connect(self.db.db_path) as db:
                cursor = await db.execute('''
                    SELECT g.name, g.status, p.joined_at, g.id
                    FROM participants p
                    JOIN giveaways g ON p.giveaway_id = g.id
                    WHERE p.user_id = ?
                    ORDER BY p.joined_at DESC
                    LIMIT 10
                ''', (user_id,))

                participations = await cursor.fetchall()

            if not participations:
                text = "üìã **–í–∞—à–∏ —É—á–∞—Å—Ç–∏—è**\n\n–í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ."
            else:
                text = "üìã **–í–∞—à–∏ —É—á–∞—Å—Ç–∏—è** (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n\n"

                for i, (name, status, joined_at, giveaway_id) in enumerate(participations, 1):
                    status_emoji = {
                        'created': 'üîß',
                        'published': 'üì¢',
                        'finished': 'üèÅ'
                    }

                    text += f"{i}. **{name}**\n"
                    text += f"   –°—Ç–∞—Ç—É—Å: {status_emoji.get(status, '‚ùì')} {status}\n"
                    text += f"   –£—á–∞—Å—Ç–≤—É—é —Å: {joined_at[:16]}\n\n"

            await update.message.reply_text(text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_user_participations: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

    async def show_user_wins(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–±–µ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–±–µ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            import aiosqlite
            async with aiosqlite.connect(self.db.db_path) as db:
                cursor = await db.execute('''
                    SELECT g.name, w.place, w.selected_at, w.data_collected, w.prize_sent
                    FROM winners w
                    JOIN giveaways g ON w.giveaway_id = g.id
                    WHERE w.user_id = ?
                    ORDER BY w.selected_at DESC
                ''', (user_id,))

                wins = await cursor.fetchall()

            if not wins:
                text = "üèÜ **–í–∞—à–∏ –ø–æ–±–µ–¥—ã**\n\n–í—ã –ø–æ–∫–∞ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–ª–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ."
            else:
                text = "üèÜ **–í–∞—à–∏ –ø–æ–±–µ–¥—ã**:\n\n"

                for i, (name, place, selected_at, data_collected, prize_sent) in enumerate(wins, 1):
                    text += f"{i}. **{name}**\n"
                    text += f"   –ú–µ—Å—Ç–æ: {place}\n"
                    text += f"   –î–∞—Ç–∞: {selected_at[:16]}\n"

                    if prize_sent:
                        text += "   ‚úÖ –ü—Ä–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n"
                    elif data_collected:
                        text += "   üìù –î–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã\n"
                    else:
                        text += "   ‚è≥ –û–∂–∏–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

                    text += "\n"

            await update.message.reply_text(text, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_user_wins: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")