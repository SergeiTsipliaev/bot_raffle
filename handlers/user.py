import json
from typing import List, Dict
from utils.helpers import generate_referral_link
import logging
from telegram import Update
from telegram.ext import ContextTypes
from database.models import DatabaseManager
from keyboards.inline import InlineKeyboards
from keyboards.reply import ReplyKeyboards
from config.settings import settings
from utils.helpers import check_channel_subscription

logger = logging.getLogger(__name__)


class UserHandlers:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    async def user_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.db.add_user({
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'language_code': user.language_code
        })

        welcome_text = settings.MESSAGES['welcome_user'].format(name=user.first_name)
        keyboard = ReplyKeyboards.user_main_menu()

        await update.message.reply_text(
            welcome_text,
            reply_markup=keyboard
        )

    async def participate_in_giveaway(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
        await update.callback_query.answer()

        callback_data = update.callback_query.data
        giveaway_id = callback_data.split('_')[1]
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à
        giveaway = await self.db.get_giveaway(giveaway_id)
        if not giveaway:
            await update.callback_query.edit_message_text("‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        if giveaway['status'] != 'published':
            await update.callback_query.edit_message_text("‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_participating = await self.db.is_participating(giveaway_id, user.id)
        if is_participating:
            await update.callback_query.edit_message_text(
                settings.MESSAGES['already_participating']
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã
        required_channels = giveaway.get('required_channels')
        if required_channels:
            channels_list = json.loads(required_channels)
            subscription_check = await self.check_subscriptions(
                user.id, channels_list, context.bot
            )

            if not subscription_check['all_subscribed']:
                unsubscribed_channels = subscription_check['unsubscribed']
                channels_text = '\n'.join([f"‚Ä¢ @{ch}" for ch in unsubscribed_channels])

                await update.callback_query.edit_message_text(
                    f"{settings.MESSAGES['subscription_required']}\n\n{channels_text}\n\n"
                    "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞."
                )
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–ø—á—É –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if giveaway.get('captcha_enabled'):
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∫–∞–ø—á–∏
            pass

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        user_data = {
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referred_by = context.user_data.get('referred_by')

        success = await self.db.add_participant(giveaway_id, user_data, referred_by)

        if success:
            participants_count = await self.db.get_participants_count(giveaway_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            keyboard = InlineKeyboards.participation_button(
                giveaway_id,
                participants_count,
                giveaway.get('show_participants_count', True),
                giveaway.get('button_text', '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å')
            )

            await update.callback_query.edit_message_reply_markup(reply_markup=keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await context.bot.send_message(
                user.id,
                f"üéâ {settings.MESSAGES['participation_success']}\n\n"
                f"**–†–æ–∑—ã–≥—Ä—ã—à:** {giveaway['name']}\n"
                f"**–í–∞—à –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞:** #{participants_count}",
                parse_mode='Markdown'
            )

            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            if giveaway.get('referral_enabled'):
                referral_link = generate_referral_link(context.bot.username, giveaway_id, user.id)
                await context.bot.send_message(
                    user.id,
                    f"üîó **–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ —É–≤–µ–ª–∏—á—å—Ç–µ —à–∞–Ω—Å—ã –Ω–∞ –ø–æ–±–µ–¥—É!**\n\n"
                    f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{referral_link}`\n\n"
                    f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤–∞—à–∏ —à–∞–Ω—Å—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è –≤ {giveaway.get('referral_multiplier', 1.5)} —Ä–∞–∑–∞!",
                    parse_mode='Markdown'
                )
        else:
            await update.callback_query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def check_subscriptions(self, user_id: int, channels: List[str], bot) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
        all_subscribed = True
        unsubscribed = []

        for channel in channels:
            try:
                member = await bot.get_chat_member(channel, user_id)
                if member.status in ['left', 'kicked']:
                    all_subscribed = False
                    unsubscribed.append(channel)
            except Exception as e:
                logger.error(f"Error checking subscription for {channel}: {e}")
                all_subscribed = False
                unsubscribed.append(channel)

        return {
            'all_subscribed': all_subscribed,
            'unsubscribed': unsubscribed
        }