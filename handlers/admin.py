from datetime import datetime
import logging
import aiosqlite
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from database.models import DatabaseManager
from keyboards.inline import InlineKeyboards
from keyboards.reply import ReplyKeyboards
from config.settings import settings
from utils.helpers import format_giveaway_info, generate_referral_link

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
GIVEAWAY_NAME, GIVEAWAY_DESCRIPTION, GIVEAWAY_SETTINGS = range(3)


class AdminHandlers:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager

    async def admin_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user

        welcome_text = settings.MESSAGES['welcome_admin'].format(name=user.first_name)
        keyboard = InlineKeyboards.admin_main_menu()

        try:
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    welcome_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    welcome_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_start: {e}")
            if update.callback_query:
                await update.callback_query.message.reply_text(
                    welcome_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )

    async def create_giveaway_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        # –£–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback query - –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ main.py

        try:
            await update.callback_query.edit_message_text(
                "üéØ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞**\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–º–∞–∫—Å–∏–º—É–º {settings.MAX_GIVEAWAY_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ create_giveaway_start: {e}")
            await update.callback_query.message.reply_text(
                "üéØ **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞**\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–º–∞–∫—Å–∏–º—É–º {settings.MAX_GIVEAWAY_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤):",
                parse_mode='Markdown'
            )

        return GIVEAWAY_NAME

    async def receive_giveaway_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        name = update.message.text.strip()

        if len(name) > settings.MAX_GIVEAWAY_NAME_LENGTH:
            await update.message.reply_text(
                f"‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ! –ú–∞–∫—Å–∏–º—É–º {settings.MAX_GIVEAWAY_NAME_LENGTH} —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return GIVEAWAY_NAME

        context.user_data['giveaway_name'] = name

        await update.message.reply_text(
            "üìù **–û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
            parse_mode='Markdown'
        )

        return GIVEAWAY_DESCRIPTION

    async def receive_giveaway_description(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        if update.message.text == '/skip':
            description = ""
        else:
            description = update.message.text.strip()

        context.user_data['giveaway_description'] = description

        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            giveaway_data = {
                'name': context.user_data['giveaway_name'],
                'description': description,
                'admin_id': update.effective_user.id
            }

            giveaway_id = await self.db.create_giveaway(giveaway_data)
            context.user_data['current_giveaway_id'] = giveaway_id

            success_message = settings.MESSAGES['giveaway_created'].format(
                name=context.user_data['giveaway_name']
            )

            keyboard = InlineKeyboards.giveaway_management(giveaway_id)

            await update.message.reply_text(
                f"‚úÖ {success_message}\n\n"
                f"**ID —Ä–æ–∑—ã–≥—Ä—ã—à–∞:** `{giveaway_id}`\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        return ConversationHandler.END

    async def my_giveaways(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            giveaways = await self.db.get_giveaways_by_admin(update.effective_user.id)

            if not giveaways:
                keyboard = InlineKeyboards.admin_main_menu()
                await update.callback_query.edit_message_text(
                    "üìã **–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏**\n\n"
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                return

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
            context.user_data['giveaways_list'] = giveaways
            context.user_data['current_giveaway_index'] = 0

            await self.show_giveaway_details(update, context, 0)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ my_giveaways: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π."
            )

    async def show_giveaway_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, index: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        try:
            giveaways = context.user_data.get('giveaways_list', [])

            if not giveaways or index >= len(giveaways):
                return

            giveaway = giveaways[index]
            participants_count = await self.db.get_participants_count(giveaway['id'])

            info_text = await format_giveaway_info(giveaway, participants_count)

            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            management_keyboard = InlineKeyboards.giveaway_management(
                giveaway['id'],
                giveaway['status']
            )

            # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            if len(giveaways) > 1:
                nav_keyboard = InlineKeyboards.giveaway_navigation(
                    index,
                    len(giveaways),
                    "giveaway"
                )
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                combined_keyboard = management_keyboard.inline_keyboard + nav_keyboard.inline_keyboard
                management_keyboard.inline_keyboard = combined_keyboard

            await update.callback_query.edit_message_text(
                info_text,
                reply_markup=management_keyboard,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ show_giveaway_details: {e}")

    async def navigate_giveaways(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞–º"""
        try:
            callback_data = update.callback_query.data
            new_index = int(callback_data.split('_')[-1])

            context.user_data['current_giveaway_index'] = new_index
            await self.show_giveaway_details(update, context, new_index)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ navigate_giveaways: {e}")

    async def manage_giveaway(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º"""
        try:
            callback_data = update.callback_query.data
            giveaway_id = callback_data.split('_')[1]

            giveaway = await self.db.get_giveaway(giveaway_id)
            if not giveaway:
                await update.callback_query.edit_message_text("‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            participants_count = await self.db.get_participants_count(giveaway_id)
            info_text = await format_giveaway_info(giveaway, participants_count)

            keyboard = InlineKeyboards.giveaway_management(giveaway_id, giveaway['status'])

            await update.callback_query.edit_message_text(
                info_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ manage_giveaway: {e}")

    async def publish_giveaway(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        try:
            callback_data = update.callback_query.data
            giveaway_id = callback_data.split('_')[1]

            keyboard = InlineKeyboards.publish_options(giveaway_id)

            await update.callback_query.edit_message_text(
                "üì¢ **–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ publish_giveaway: {e}")

    async def instant_publish(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è"""
        try:
            callback_data = update.callback_query.data
            giveaway_id = callback_data.split('_')[2]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            async with aiosqlite.connect(self.db.db_path) as db:
                await db.execute(
                    'UPDATE giveaways SET status = ?, published_at = ? WHERE id = ?',
                    ('published', datetime.now().isoformat(), giveaway_id)
                )
                await db.commit()

            await update.callback_query.edit_message_text(
                "‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!\n\n"
                "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ instant_publish: {e}")
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞."
            )