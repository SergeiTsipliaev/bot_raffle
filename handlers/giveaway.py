from typing import List, Dict
from database.queries import DatabaseQueries
import logging
import random
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
from database.models import DatabaseManager
from config.settings import settings
from utils.helpers import format_winners_list

logger = logging.getLogger(__name__)


class GiveawayHandlers:
    def __init__(self, db_manager: DatabaseManager):
        self.db = db_manager
        self.queries = DatabaseQueries(db_manager)

    async def draw_winners(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –∏ –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"""
        await update.callback_query.answer()

        callback_data = update.callback_query.data
        giveaway_id = callback_data.split('_')[1]

        giveaway = await self.db.get_giveaway(giveaway_id)
        if not giveaway:
            await update.callback_query.edit_message_text("‚ùå –†–æ–∑—ã–≥—Ä—ã—à –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = await self.queries.get_participants(giveaway_id)

        if not participants:
            await update.callback_query.edit_message_text(
                "‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞!"
            )
            return

        prizes_count = giveaway.get('prizes_count', 1)

        if len(participants) < prizes_count:
            await update.callback_query.edit_message_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {prizes_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Å —É—á–µ—Ç–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
        weighted_participants = []
        for participant in participants:
            weight = 1.0

            if giveaway.get('referral_enabled') and participant.get('referral_count', 0) > 0:
                multiplier = giveaway.get('referral_multiplier', 1.5)
                max_multiplier = giveaway.get('max_referral_multiplier', 5.0)

                weight = min(
                    1.0 + (participant['referral_count'] * (multiplier - 1.0)),
                    max_multiplier
                )

            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–∞
            for _ in range(int(weight * 100)):  # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 100 –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
                weighted_participants.append(participant)

        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        winners = []
        used_participants = set()

        for place in range(prizes_count):
            available_participants = [
                p for p in weighted_participants
                if p['user_id'] not in used_participants
            ]

            if not available_participants:
                break

            winner = random.choice(available_participants)
            winners.append({
                'user_id': winner['user_id'],
                'username': winner.get('username'),
                'first_name': winner.get('first_name'),
                'place': place + 1
            })
            used_participants.add(winner['user_id'])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.queries.save_winners(giveaway_id, winners)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        await self.queries.update_giveaway_status(giveaway_id, 'finished')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö
        winners_text = format_winners_list(winners)

        await update.callback_query.edit_message_text(
            f"üèÜ **{settings.MESSAGES['winners_selected']}**\n\n"
            f"**–†–æ–∑—ã–≥—Ä—ã—à:** {giveaway['name']}\n"
            f"**–î–∞—Ç–∞:** {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"{winners_text}\n\n"
            "–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –±—É–¥—É—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
            parse_mode='Markdown'
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        await self.notify_winners(giveaway_id, winners, context.bot)

    async def notify_winners(self, giveaway_id: str, winners: List[Dict], bot):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"""
        giveaway = await self.db.get_giveaway(giveaway_id)

        for winner in winners:
            try:
                message = (
                    f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!**\n\n"
                    f"**–†–æ–∑—ã–≥—Ä—ã—à:** {giveaway['name']}\n"
                    f"**–í–∞—à–µ –º–µ—Å—Ç–æ:** {winner['place']}\n\n"
                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
                )

                await bot.send_message(
                    winner['user_id'],
                    message,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"Error notifying winner {winner['user_id']}: {e}")

    async def collect_winner_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
        winner_info = await self.queries.get_winner_info(user_id)

        if not winner_info:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π."
            )
            return

        if winner_info['data_collected']:
            await update.message.reply_text(
                "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã! –ü—Ä–∏–∑ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
            )
            return

        # –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        context.user_data['collecting_data_for'] = winner_info['giveaway_id']

        await update.message.reply_text(
            f"{settings.MESSAGES['data_collection']}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ **–ø–æ–ª–Ω–æ–µ –∏–º—è**:",
            parse_mode='Markdown'
        )