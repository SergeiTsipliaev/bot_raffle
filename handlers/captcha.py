from typing import List, Dict
import random
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from config.settings import settings


class CaptchaHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø—á–∏"""

    CAPTCHA_IMAGES = {
        '–ø–æ–Ω—á–∏–∫–∏': ['üç©', 'ü•ñ', 'üçû', 'üßÅ', 'üç∞', 'üç©'],
        '–∂–∏–≤–æ—Ç–Ω—ã–µ': ['üê∂', 'üê±', 'üê≠', 'üê∞', 'ü¶ä', 'üê∂'],
        '—Ñ—Ä—É–∫—Ç—ã': ['üçé', 'üçå', 'üçä', 'üçá', 'üçì', 'üçé'],
        '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': ['üöó', '‚úàÔ∏è', 'üöÇ', 'üö≤', 'üõ•Ô∏è', 'üöó'],
        '—Ü–≤–µ—Ç—ã': ['üå∏', 'üåº', 'üå∫', 'üåª', 'üå∑', 'üå∏']
    }

    def __init__(self, db_manager):
        self.db = db_manager
        self.active_captchas = {}  # user_id: captcha_data

    async def generate_captcha(self, user_id: int, giveaway_id: str) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = random.choice(list(self.CAPTCHA_IMAGES.keys()))
        images = self.CAPTCHA_IMAGES[category].copy()

        # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        correct_image = images[0]  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        random.shuffle(images)

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        correct_position = images.index(correct_image)

        captcha_data = {
            'giveaway_id': giveaway_id,
            'category': category,
            'images': images,
            'correct_position': correct_position,
            'attempts': 0,
            'max_attempts': 3
        }

        self.active_captchas[user_id] = captcha_data

        return captcha_data

    def create_captcha_keyboard(self, images: List[str], captcha_id: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–ø—á–∏"""
        keyboard = []
        row = []

        for i, image in enumerate(images):
            row.append(InlineKeyboardButton(
                image,
                callback_data=f"captcha_{captcha_id}_{i}"
            ))

            if len(row) == 3:  # 3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ä—è–¥
                keyboard.append(row)
                row = []

        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            keyboard.append(row)

        return InlineKeyboardMarkup(keyboard)

    async def show_captcha(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                           user_id: int, giveaway_id: str):
        """–ü–æ–∫–∞–∑ –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        captcha_data = await self.generate_captcha(user_id, giveaway_id)

        category = captcha_data['category']
        images = captcha_data['images']

        keyboard = self.create_captcha_keyboard(images, f"{user_id}_{giveaway_id}")

        text = (
            f"üõ°Ô∏è **–ó–∞—â–∏—Ç–∞ –æ—Ç –±–æ—Ç–æ–≤**\n\n"
            f"–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å **{category}**:"
        )

        await update.callback_query.edit_message_text(
            text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    async def verify_captcha(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–∞–ø—á–∏"""
        callback_data = update.callback_query.data
        parts = callback_data.split('_')

        if len(parts) != 4 or parts[0] != 'captcha':
            return False

        user_id = int(parts[1])
        giveaway_id = parts[2]
        selected_position = int(parts[3])

        if user_id not in self.active_captchas:
            await update.callback_query.answer("‚ùå –°–µ—Å—Å–∏—è –∫–∞–ø—á–∏ –∏—Å—Ç–µ–∫–ª–∞!", show_alert=True)
            return False

        captcha_data = self.active_captchas[user_id]
        correct_position = captcha_data['correct_position']

        if selected_position == correct_position:
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            del self.active_captchas[user_id]
            await update.callback_query.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞!", show_alert=True)
            return True
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            captcha_data['attempts'] += 1

            if captcha_data['attempts'] >= captcha_data['max_attempts']:
                del self.active_captchas[user_id]
                await update.callback_query.answer(
                    "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    show_alert=True
                )
                return False
            else:
                remaining_attempts = captcha_data['max_attempts'] - captcha_data['attempts']
                await update.callback_query.answer(
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}",
                    show_alert=True
                )
                return False