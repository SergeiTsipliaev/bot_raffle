import logging
import asyncio
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler

from config.settings import settings
from database.models import DatabaseManager
from handlers.admin import AdminHandlers, GIVEAWAY_NAME, GIVEAWAY_DESCRIPTION
from handlers.user import UserHandlers
from handlers.giveaway import GiveawayHandlers
from handlers.captcha import CaptchaHandler
from handlers.export import ExportHandler
from handlers.media import MediaHandler
from utils.helpers import parse_referral_link

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class GiveawayBot:
    def __init__(self):
        self.token = settings.BOT_TOKEN
        self.db = DatabaseManager()
        self.admin_handlers = AdminHandlers(self.db)
        self.user_handlers = UserHandlers(self.db)
        self.giveaway_handlers = GiveawayHandlers(self.db)
        self.captcha_handler = CaptchaHandler(self.db)
        self.export_handler = ExportHandler(self.db)
        self.media_handler = MediaHandler(self.db)

    async def start_command(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.db.add_user({
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'language_code': user.language_code
        })

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        if context.args:
            start_param = context.args[0]
            referral_data = parse_referral_link(start_param)
            if referral_data:
                context.user_data['referred_by'] = referral_data['referrer_id']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_admin = await self.db.is_admin(user.id)

        if is_admin:
            await self.admin_handlers.admin_start(update, context)
        else:
            await self.user_handlers.user_start(update, context)

    async def callback_query_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        data = query.data
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è admin –∫–æ–º–∞–Ω–¥
        admin_commands = [
            'create_giveaway', 'my_giveaways', 'manage_', 'edit_',
            'publish_', 'delete_', 'draw_', 'settings', 'statistics',
            'export_', 'channels_', 'protection_', 'schedule_',
            'advanced_', 'participants_', 'winners_', 'redraw_'
        ]

        is_admin_command = any(data.startswith(cmd) for cmd in admin_commands)

        if is_admin_command:
            is_admin = await self.db.is_admin(user_id)
            if not is_admin:
                await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
                return

        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback –∑–∞–ø—Ä–æ—Å–æ–≤
        try:
            if data == 'admin_menu':
                await self.admin_handlers.admin_start(update, context)
            elif data == 'create_giveaway':
                await self.admin_handlers.create_giveaway_start(update, context)
            elif data == 'my_giveaways':
                await self.admin_handlers.my_giveaways(update, context)
            elif data.startswith('giveaway_nav_'):
                await self.admin_handlers.navigate_giveaways(update, context)
            elif data.startswith('manage_'):
                await self.admin_handlers.manage_giveaway(update, context)
            elif data.startswith('publish_'):
                await self.admin_handlers.publish_giveaway(update, context)
            elif data.startswith('publish_instant_'):
                await self.admin_handlers.instant_publish(update, context)
            elif data.startswith('participate_'):
                await self.user_handlers.participate_in_giveaway(update, context)
            elif data.startswith('draw_'):
                await self.giveaway_handlers.draw_winners(update, context)
            elif data.startswith('captcha_'):
                await self.captcha_handler.verify_captcha(update, context)
            elif data.startswith('export_'):
                await self.export_handler.export_participants_csv(update, context)
            elif data.startswith('statistics'):
                await self.export_handler.export_statistics_json(update, context)
            else:
                await query.answer("üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_query_handler: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

    async def media_message_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)"""
        user_id = update.effective_user.id
        is_admin = await self.db.is_admin(user_id)

        if is_admin:
            await self.media_handler.process_forwarded_message(update, context)
        else:
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –Ω–∞–π–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö."
            )

    def setup_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

        # Conversation handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        create_giveaway_conv = ConversationHandler(
            entry_points=[CallbackQueryHandler(
                self.admin_handlers.create_giveaway_start,
                pattern='^create_giveaway$'
            )],
            states={
                GIVEAWAY_NAME: [MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    self.admin_handlers.receive_giveaway_name
                )],
                GIVEAWAY_DESCRIPTION: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.admin_handlers.receive_giveaway_description
                    ),
                    CommandHandler('skip', self.admin_handlers.receive_giveaway_description)
                ]
            },
            fallbacks=[CommandHandler('cancel', self.cancel_conversation)]
        )

        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler('start', self.start_command))
        application.add_handler(create_giveaway_conv)
        application.add_handler(CallbackQueryHandler(self.callback_query_handler))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ)
        application.add_handler(MessageHandler(
            filters.PHOTO | filters.VIDEO,
            self.media_message_handler
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.handle_text_message
        ))

    async def cancel_conversation(self, update, context):
        """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    async def handle_text_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user_id = update.effective_user.id

        is_admin = await self.db.is_admin(user_id)

        if is_admin:
            if text == f"{settings.EMOJIS['create']} –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à":
                # –ò–º–∏—Ç–∏—Ä—É–µ–º callback query –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
                from telegram import CallbackQuery
                fake_query = CallbackQuery(
                    id="fake",
                    from_user=update.effective_user,
                    chat_instance="fake",
                    data="create_giveaway",
                    message=update.message
                )
                update.callback_query = fake_query
                await self.admin_handlers.create_giveaway_start(update, context)
            elif text == f"{settings.EMOJIS['list']} –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏":
                from telegram import CallbackQuery
                fake_query = CallbackQuery(
                    id="fake",
                    from_user=update.effective_user,
                    chat_instance="fake",
                    data="my_giveaways",
                    message=update.message
                )
                update.callback_query = fake_query
                await self.admin_handlers.my_giveaways(update, context)
            else:
                await update.message.reply_text(
                    "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
                    reply_markup=None
                )
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await update.message.reply_text(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –Ω–∞–π–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö."
            )

    async def error_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")

        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await self.db.init_database()

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(self.token).build()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers(application)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await application.run_polling(drop_pending_updates=True)


if __name__ == '__main__':
    bot = GiveawayBot()
    asyncio.run(bot.run())