import logging
import asyncio
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ConversationHandler
from telegram.ext import filters
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

from config.settings import settings
from database.models import DatabaseManager
from handlers.admin import AdminHandlers, GIVEAWAY_NAME, GIVEAWAY_DESCRIPTION
from handlers.user import UserHandlers
from handlers.giveaway import GiveawayHandlers
from handlers.captcha import CaptchaHandler
from handlers.export import ExportHandler
from handlers.media import MediaHandler
from utils.helpers import parse_referral_link

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class GiveawayBot:
    def __init__(self):
        self.token = settings.BOT_TOKEN
        self.db = DatabaseManager()
        self.admin_handlers = AdminHandlers(self.db)
        self.user_handlers = UserHandlers(self.db)
        self.giveaway_handlers = GiveawayHandlers(self.db)
        self.captcha_handler = CaptchaHandler(self.db)
        self.export_handler = ExportHandler(self.db)
        self.media_handler = MediaHandler(self.db)

    async def start_command(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            user = update.effective_user
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} (@{user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.add_user({
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'language_code': user.language_code
            })

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            if context.args:
                start_param = context.args[0]
                referral_data = parse_referral_link(start_param)
                if referral_data:
                    context.user_data['referred_by'] = referral_data['referrer_id']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            is_admin = await self.db.is_admin(user.id)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {is_admin}")

            if is_admin:
                await self.admin_handlers.admin_start(update, context)
            else:
                await self.user_handlers.user_start(update, context)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def callback_query_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            query = update.callback_query
            data = query.data
            user_id = update.effective_user.id

            logger.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {data}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è admin –∫–æ–º–∞–Ω–¥
            admin_commands = [
                'create_giveaway', 'my_giveaways', 'manage_', 'edit_',
                'publish_', 'delete_', 'draw_', 'settings', 'statistics',
                'export_', 'channels_', 'protection_', 'schedule_',
                'advanced_', 'participants_', 'winners_', 'redraw_'
            ]

            is_admin_command = any(data.startswith(cmd) for cmd in admin_commands)

            if is_admin_command:
                is_admin = await self.db.is_admin(user_id)
                if not is_admin:
                    await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
                    return

            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
            await query.answer()

            # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è callback –∑–∞–ø—Ä–æ—Å–æ–≤
            if data == 'admin_menu':
                await self.admin_handlers.admin_start(update, context)
            elif data == 'my_giveaways':
                await self.admin_handlers.my_giveaways(update, context)
            elif data.startswith('giveaway_nav_'):
                await self.admin_handlers.navigate_giveaways(update, context)
            elif data.startswith('manage_'):
                await self.admin_handlers.manage_giveaway(update, context)
            elif data.startswith('publish_'):
                await self.admin_handlers.publish_giveaway(update, context)
            elif data.startswith('publish_instant_'):
                await self.admin_handlers.instant_publish(update, context)
            elif data.startswith('participate_'):
                await self.user_handlers.participate_in_giveaway(update, context)
            elif data.startswith('draw_'):
                await self.giveaway_handlers.draw_winners(update, context)
            elif data.startswith('captcha_'):
                success = await self.captcha_handler.verify_captcha(update, context)
                if success:
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—á–∞—Å—Ç–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∫–∞–ø—á–∏
                    callback_data = update.callback_query.data
                    parts = callback_data.split('_')
                    if len(parts) >= 3:
                        giveaway_id = parts[2]
                        giveaway = await self.db.get_giveaway(giveaway_id)
                        if giveaway:
                            await self.user_handlers._add_participant_to_giveaway(
                                update, context, giveaway_id, giveaway
                            )
            elif data.startswith('export_'):
                await self.export_handler.export_participants_csv(update, context)
            elif data == 'statistics':
                await self.export_handler.export_statistics_json(update, context)
            else:
                await query.edit_message_text("üîß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_query_handler: {e}")
            try:
                if update.callback_query:
                    await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except:
                pass

    async def text_message_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            text = update.message.text
            user_id = update.effective_user.id

            logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")

            is_admin = await self.db.is_admin(user_id)

            if is_admin:
                if text == f"{settings.EMOJIS['create']} –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à":
                    keyboard = InlineKeyboardMarkup([[
                        InlineKeyboardButton("üéØ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", callback_data="create_giveaway")
                    ]])

                    await update.message.reply_text(
                        "üéØ **–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                elif text == f"{settings.EMOJIS['list']} –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏":
                    keyboard = InlineKeyboardMarkup([[
                        InlineKeyboardButton("üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏", callback_data="my_giveaways")
                    ]])

                    await update.message.reply_text(
                        "üìã **–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=keyboard,
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text(
                        "ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
                    )
            else:
                if text == "üìã –ú–æ–∏ —É—á–∞—Å—Ç–∏—è":
                    await self.user_handlers.show_user_participations(update, context)
                elif text == "üèÜ –ú–æ–∏ –ø–æ–±–µ–¥—ã":
                    await self.user_handlers.show_user_wins(update, context)
                else:
                    await update.message.reply_text(
                        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –Ω–∞–π–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö."
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ text_message_handler: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def media_message_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            user_id = update.effective_user.id
            is_admin = await self.db.is_admin(user_id)

            logger.info(f"–ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}, –∞–¥–º–∏–Ω: {is_admin}")

            if is_admin:
                await self.media_handler.process_forwarded_message(update, context)
            else:
                await update.message.reply_text(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –Ω–∞–π–¥–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –≤ –∫–∞–Ω–∞–ª–∞—Ö."
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ media_message_handler: {e}")

    def setup_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")

        # Conversation handler –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        create_giveaway_conv = ConversationHandler(
            entry_points=[CallbackQueryHandler(
                self.admin_handlers.create_giveaway_start,
                pattern='^create_giveaway$'
            )],
            states={
                GIVEAWAY_NAME: [MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    self.admin_handlers.receive_giveaway_name
                )],
                GIVEAWAY_DESCRIPTION: [
                    MessageHandler(
                        filters.TEXT & ~filters.COMMAND,
                        self.admin_handlers.receive_giveaway_description
                    ),
                    CommandHandler('skip', self.admin_handlers.receive_giveaway_description)
                ]
            },
            fallbacks=[CommandHandler('cancel', self.cancel_conversation)]
        )

        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler('start', self.start_command))
        application.add_handler(create_giveaway_conv)
        application.add_handler(CallbackQueryHandler(self.callback_query_handler))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ, –±–µ–∑ DOCUMENT)
        application.add_handler(MessageHandler(
            filters.PHOTO | filters.VIDEO,
            self.media_message_handler
        ))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            self.text_message_handler
        ))

        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

    async def cancel_conversation(self, update, context):
        """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END

    async def error_handler(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")

        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            except:
                pass

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π...")
            logger.info(f"üìä –¢–æ–∫–µ–Ω –±–æ—Ç–∞: {self.token[:10]}...")
            logger.info(f"üë§ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {settings.ADMIN_USER_ID}")

            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            await self.db.init_database()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            application = Application.builder().token(self.token).build()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
            bot_info = await application.bot.get_me()
            logger.info(f"ü§ñ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É —É—Å–ø–µ—à–Ω–æ: @{bot_info.username}")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            self.setup_handlers(application)

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            application.add_error_handler(self.error_handler)

            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
            logger.info("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            await application.run_polling(drop_pending_updates=True)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
            raise


if __name__ == '__main__':
    bot = GiveawayBot()
    asyncio.run(bot.run())